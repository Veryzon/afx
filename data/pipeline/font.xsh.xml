<Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>
