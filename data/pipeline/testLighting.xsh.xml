<Qwadro>
    <Shader id='blinnVsh'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Include>data/pipeline/stdObject.inc</Include>
        <Resource type='CONSTANT_BUFFER'>sgl_view</Resource>
        <Resource set='3' type='CONSTANT_BUFFER'>sgl_obj</Resource>
        <In location='0'>vec4 in_posn</In>
        <In location='3'>vec3 in_nrm</In>
        <![CDATA[
        
        layout (location = 0) in vec4 in_posn;
        layout (location = 3) in vec3 in_nrm;
        
        out block
        {
            vec4 posn;
            vec3 nrm;
        } sgl_out;

        void main()
        {
            sgl_out.posn = vec4(v * m * in_posn);
            mat3 n = mat3(transpose(inverse(m))); // gambiarra
            sgl_out.nrm = normalize(n * in_nrm);

            gl_Position = p * v * m * in_posn;
        }
        ]]>
    </Shader>
    <Shader id='blinnFsh'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Include>data/pipeline/stdMaterial.inc</Include>
        <Resource type='CONSTANT_BUFFER'>sgl_view</Resource>
        <Resource set='2' type='CONSTANT_BUFFER'>sgl_mtl</Resource>
        <Out location='0'>vec4 out_rgba0</Out>
        <![CDATA[
        
        in block
        {
            vec4 posn;
            vec3 nrm;
        } sgl_in;
        
        out vec4 out_rgba0;
        
        vec4 litSrc0Pos = vec4(100, 1000, 0, 1);
        vec4 litProd0Ambi = vec4(0.1, 0.1, 0.1, 1);
        vec4 litProd0Diff = vec4(0.9, 0.8, 0.7, 1);
        vec4 litProd0Spec = vec4(0.1, 0.1, 0.1, 1);
        vec4 litModelAmbi = vec4(1, 1, 1, 1);
        vec4 mtlAmbi = vec4(0.1, 0.1, 0.1, 1);
        float mltShinisses = 10;
        
        void main (void)
        { 
            // calculate light diffusion
            vec3 light = normalize(litSrc0Pos.xyz - sgl_in.posn.xyz); 
            vec3 view = normalize(-sgl_in.posn.xyz); 
            vec3 normal = normalize(sgl_in.nrm); 

            // calculate ambience
            vec4 ambient = litProd0Ambi;
            vec4 global = mtlAmbi * litModelAmbi;

            // get vector to light
            vec4 diffuse = litProd0Diff * max(dot(sgl_in.nrm, light), 0.0);
            diffuse = clamp(diffuse, 0.0, 1.0);

            // Blinn specular variation
            vec3 halfDir = normalize(light + view);
            float spec = pow(max(dot(normal, halfDir), 0.0), mltShinisses * 0.2);
            vec4 specular = litProd0Spec * spec;
            specular = clamp(specular, 0.0, 1.0);

            // do calculations on every fragment
            out_rgba0 = global + ambient + diffuse + specular;
        }
        ]]>
    </Shader>
    <Pipeline id='blinn'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_LIST</PrimitiveTopology>
        <Shader>data/pipeline/testLighting.xsh.xml?blinnVsh</Shader>
        <Shader>data/pipeline/testLighting.xsh.xml?blinnFsh</Shader>
        <Rasterizer>data/pipeline/testLighting.xsh.xml</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthTestEnabled></DepthTestEnabled>
        <DepthWriteEnabled></DepthWriteEnabled>
        <DepthCompareOp>LESS</DepthCompareOp>
    </Rasterizer>
</Qwadro>
