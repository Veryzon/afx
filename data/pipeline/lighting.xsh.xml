<Qwadro>
    <Shader id='vsh'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Include>data/pipeline/stdObject.inc</Include>
        <Resource type='CONSTANT_BUFFER'>sgl_view</Resource>
        <Resource set='3' type='CONSTANT_BUFFER'>sgl_obj</Resource>
        <In location='0' format='V4D'>in_posn</In>
        <In location='3' format='V3D'>in_nrm</In>
        <In location='6' format='V2D'>in_uv0</In>
        <![CDATA[
        
        layout (location = 0) in vec4 in_posn;
        layout (location = 3) in vec3 in_nrm;
        layout (location = 6) in vec2 in_uv0;
        
        out block
        {
            vec4 posn;
            vec3 nrm;
            vec2 uv0;
        } sgl_out;

        void main()
        {
            sgl_out.posn = m * in_posn;//vec4(in_pos, 1.0);
            sgl_out.nrm = in_nrm;
            sgl_out.uv0 = in_uv0;
            gl_Position = p * v * m * in_posn;//vec4(in_pos, 1.0);
        }
        ]]>
    </Shader>
    <Shader id='fsh'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Include>data/pipeline/stdMaterial.inc</Include>
        <Resource type='CONSTANT_BUFFER'>sgl_view</Resource>
        <Resource set='2' type='CONSTANT_BUFFER'>sgl_mtl</Resource>
        <Out location='0' format='V4D'>out_rgba0</Out>
        <![CDATA[
        
        uniform sampler2D floorTexture;
        vec3 lightPos = vec3(100, 100, 0);
        int blinn = 1;
        
        in block
        {
            vec4 posn;
            vec3 nrm;
            vec2 uv0;
        } sgl_in;
        
        out vec4 out_rgba0;
        
        void main (void)
        { 
            vec3 color = vec3(0.5,0.5,0.5);//texture(floorTexture, sgl_in.uv0).rgb;
            
            // ambient
            vec3 ambient = 0.05 * color;
            
            // diffuse
            vec3 lightDir = normalize(lightPos - vec3(sgl_in.posn));
            vec3 normal = normalize(sgl_in.nrm);
            float diff = max(dot(lightDir, normal), 0.0);
            vec3 diffuse = diff * color;
            
            // specular
            vec3 viewDir = vec3(normalize(viewPos - sgl_in.posn));
            vec3 reflectDir = reflect(-lightDir, normal);
            float spec = 0.0;
            
            if(blinn == 1)
            {
                vec3 halfwayDir = normalize(lightDir + viewDir);  
                spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
            }
            else
            {
                vec3 reflectDir = reflect(-lightDir, normal);
                spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
            }
            
            vec3 specular = vec3(0.3) * spec; // assuming bright white light color
            out_rgba0 = vec4(ambient + diffuse + specular, 1.0);
        }
        ]]>
    </Shader>
    <Pipeline id='lighting'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_LIST</PrimitiveTopology>
        <Shader>data/pipeline/lighting.xsh.xml?vsh</Shader>
        <Shader>data/pipeline/lighting.xsh.xml?fsh</Shader>
        <Rasterizer>data/pipeline/lighting.xsh.xml</Rasterizer>        
        <Input stream='0'>0</Input>
        <Input stream='1'>3</Input>
        <Input stream='1'>6</Input>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthTestEnabled></DepthTestEnabled>
        <DepthWriteEnabled></DepthWriteEnabled>
        <DepthCompareOp>LESS</DepthCompareOp>
    </Rasterizer>
</Qwadro>
